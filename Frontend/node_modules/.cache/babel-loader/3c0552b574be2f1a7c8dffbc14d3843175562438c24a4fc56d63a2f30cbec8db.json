{"ast":null,"code":"/**\r\n * File Validation Utility\r\n * Provides consistent file validation across all components\r\n */\n\n// File type constants\nexport const FILE_TYPES = {\n  SESSION: '.session',\n  ZIP: '.zip',\n  IMAGE: ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'],\n  ALL_IMAGES: ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'],\n  ALL_SESSION_FILES: ['.session', '.zip']\n};\n\n// File size constants (in bytes)\nexport const FILE_SIZES = {\n  MAX_SESSION_FILE: 5 * 1024 * 1024,\n  // 5MB\n  MAX_IMAGE_FILE: 10 * 1024 * 1024,\n  // 10MB\n  MAX_ZIP_FILE: 50 * 1024 * 1024,\n  // 50MB\n  MIN_IMAGE_FILE: 1024 // 1KB\n};\n\n/**\r\n * Validate file type\r\n * @param {File} file - File to validate\r\n * @param {Array} allowedTypes - Array of allowed file extensions\r\n * @returns {Object} - Validation result\r\n */\nexport const validateFileType = (file, allowedTypes) => {\n  if (!file || !file.name) {\n    return {\n      isValid: false,\n      error: 'Invalid file object'\n    };\n  }\n  const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n  if (!allowedTypes.includes(fileExtension)) {\n    return {\n      isValid: false,\n      error: `File type not allowed. Allowed types: ${allowedTypes.join(', ')}`\n    };\n  }\n  return {\n    isValid: true,\n    fileExtension\n  };\n};\n\n/**\r\n * Validate file size\r\n * @param {File} file - File to validate\r\n * @param {number} maxSize - Maximum file size in bytes\r\n * @param {number} minSize - Minimum file size in bytes (optional)\r\n * @returns {Object} - Validation result\r\n */\nexport const validateFileSize = (file, maxSize, minSize = 0) => {\n  if (!file) {\n    return {\n      isValid: false,\n      error: 'Invalid file object'\n    };\n  }\n  if (file.size > maxSize) {\n    const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(1);\n    return {\n      isValid: false,\n      error: `File too large. Maximum size: ${maxSizeMB}MB`\n    };\n  }\n  if (minSize > 0 && file.size < minSize) {\n    const minSizeKB = (minSize / 1024).toFixed(1);\n    return {\n      isValid: false,\n      error: `File too small. Minimum size: ${minSizeKB}KB`\n    };\n  }\n  return {\n    isValid: true,\n    fileSize: file.size\n  };\n};\n\n/**\r\n * Validate session file\r\n * @param {File} file - File to validate\r\n * @returns {Object} - Validation result\r\n */\nexport const validateSessionFile = file => {\n  // Validate file type\n  const typeValidation = validateFileType(file, FILE_TYPES.ALL_SESSION_FILES);\n  if (!typeValidation.isValid) {\n    return typeValidation;\n  }\n\n  // Validate file size\n  const sizeValidation = validateFileSize(file, FILE_SIZES.MAX_SESSION_FILE);\n  if (!sizeValidation.isValid) {\n    return sizeValidation;\n  }\n  return {\n    isValid: true,\n    fileType: typeValidation.fileExtension,\n    fileSize: sizeValidation.fileSize\n  };\n};\n\n/**\r\n * Validate image file\r\n * @param {File} file - File to validate\r\n * @returns {Object} - Validation result\r\n */\nexport const validateImageFile = file => {\n  // Validate file type\n  const typeValidation = validateFileType(file, FILE_TYPES.ALL_IMAGES);\n  if (!typeValidation.isValid) {\n    return typeValidation;\n  }\n\n  // Validate file size\n  const sizeValidation = validateFileSize(file, FILE_SIZES.MAX_IMAGE_FILE, FILE_SIZES.MIN_IMAGE_FILE);\n  if (!sizeValidation.isValid) {\n    return sizeValidation;\n  }\n  return {\n    isValid: true,\n    fileType: typeValidation.fileExtension,\n    fileSize: sizeValidation.fileSize\n  };\n};\n\n/**\r\n * Validate multiple files\r\n * @param {Array} files - Array of files to validate\r\n * @param {Function} validator - Validation function to use\r\n * @returns {Object} - Validation result\r\n */\nexport const validateMultipleFiles = (files, validator) => {\n  if (!Array.isArray(files) || files.length === 0) {\n    return {\n      isValid: false,\n      error: 'No files provided'\n    };\n  }\n  const results = [];\n  const errors = [];\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i];\n    const validation = validator(file);\n    if (validation.isValid) {\n      results.push({\n        file,\n        index: i,\n        ...validation\n      });\n    } else {\n      errors.push({\n        file,\n        index: i,\n        error: validation.error\n      });\n    }\n  }\n  return {\n    isValid: errors.length === 0,\n    validFiles: results,\n    invalidFiles: errors,\n    totalFiles: files.length,\n    validCount: results.length,\n    invalidCount: errors.length\n  };\n};\n\n/**\r\n * Validate file upload for specific use case\r\n * @param {Array} files - Files to validate\r\n * @param {string} useCase - Use case for validation\r\n * @returns {Object} - Validation result\r\n */\nexport const validateFileUpload = (files, useCase) => {\n  const validators = {\n    'session': validateSessionFile,\n    'image': validateImageFile,\n    'zip': file => validateFileType(file, [FILE_TYPES.ZIP]) && validateFileSize(file, FILE_SIZES.MAX_ZIP_FILE),\n    'mixed': file => {\n      if (file.name.endsWith(FILE_TYPES.SESSION)) {\n        return validateSessionFile(file);\n      } else if (file.name.endsWith(FILE_TYPES.ZIP)) {\n        return validateFileType(file, [FILE_TYPES.ZIP]) && validateFileSize(file, FILE_SIZES.MAX_ZIP_FILE);\n      }\n      return {\n        isValid: false,\n        error: 'Invalid file type'\n      };\n    }\n  };\n  const validator = validators[useCase];\n  if (!validator) {\n    return {\n      isValid: false,\n      error: `Unknown use case: ${useCase}`\n    };\n  }\n  return validateMultipleFiles(files, validator);\n};\n\n/**\r\n * Format file size for display\r\n * @param {number} bytes - File size in bytes\r\n * @returns {string} - Formatted file size\r\n */\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\r\n * Get file icon based on file type\r\n * @param {string} fileName - File name\r\n * @returns {string} - Icon name for the file type\r\n */\nexport const getFileIcon = fileName => {\n  if (!fileName) return 'file';\n  const extension = fileName.toLowerCase().substring(fileName.lastIndexOf('.'));\n  if (extension === FILE_TYPES.SESSION) return 'session';\n  if (extension === FILE_TYPES.ZIP) return 'archive';\n  if (FILE_TYPES.IMAGE.includes(extension)) return 'image';\n  return 'file';\n};\n\n/**\r\n * Check if file is an image\r\n * @param {File} file - File to check\r\n * @returns {boolean} - True if file is an image\r\n */\nexport const isImageFile = file => {\n  if (!file || !file.name) return false;\n  const extension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n  return FILE_TYPES.IMAGE.includes(extension);\n};\n\n/**\r\n * Check if file is a session file\r\n * @param {File} file - File to check\r\n * @returns {boolean} - True if file is a session file\r\n */\nexport const isSessionFile = file => {\n  if (!file || !file.name) return false;\n  const extension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n  return extension === FILE_TYPES.SESSION;\n};\n\n/**\r\n * Check if file is a ZIP file\r\n * @param {File} file - File to check\r\n * @returns {boolean} - True if file is a ZIP file\r\n */\nexport const isZipFile = file => {\n  if (!file || !file.name) return false;\n  const extension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n  return extension === FILE_TYPES.ZIP;\n};\nexport default {\n  FILE_TYPES,\n  FILE_SIZES,\n  validateFileType,\n  validateFileSize,\n  validateSessionFile,\n  validateImageFile,\n  validateMultipleFiles,\n  validateFileUpload,\n  formatFileSize,\n  getFileIcon,\n  isImageFile,\n  isSessionFile,\n  isZipFile\n};","map":{"version":3,"names":["FILE_TYPES","SESSION","ZIP","IMAGE","ALL_IMAGES","ALL_SESSION_FILES","FILE_SIZES","MAX_SESSION_FILE","MAX_IMAGE_FILE","MAX_ZIP_FILE","MIN_IMAGE_FILE","validateFileType","file","allowedTypes","name","isValid","error","fileExtension","toLowerCase","substring","lastIndexOf","includes","join","validateFileSize","maxSize","minSize","size","maxSizeMB","toFixed","minSizeKB","fileSize","validateSessionFile","typeValidation","sizeValidation","fileType","validateImageFile","validateMultipleFiles","files","validator","Array","isArray","length","results","errors","i","validation","push","index","validFiles","invalidFiles","totalFiles","validCount","invalidCount","validateFileUpload","useCase","validators","endsWith","formatFileSize","bytes","k","sizes","Math","floor","log","parseFloat","pow","getFileIcon","fileName","extension","isImageFile","isSessionFile","isZipFile"],"sources":["F:/Local disk c/Session Web 2.0/Frontend/src/utils/fileValidation.js"],"sourcesContent":["/**\r\n * File Validation Utility\r\n * Provides consistent file validation across all components\r\n */\r\n\r\n// File type constants\r\nexport const FILE_TYPES = {\r\n  SESSION: '.session',\r\n  ZIP: '.zip',\r\n  IMAGE: ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'],\r\n  ALL_IMAGES: ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'],\r\n  ALL_SESSION_FILES: ['.session', '.zip']\r\n};\r\n\r\n// File size constants (in bytes)\r\nexport const FILE_SIZES = {\r\n  MAX_SESSION_FILE: 5 * 1024 * 1024, // 5MB\r\n  MAX_IMAGE_FILE: 10 * 1024 * 1024,  // 10MB\r\n  MAX_ZIP_FILE: 50 * 1024 * 1024,    // 50MB\r\n  MIN_IMAGE_FILE: 1024,               // 1KB\r\n};\r\n\r\n/**\r\n * Validate file type\r\n * @param {File} file - File to validate\r\n * @param {Array} allowedTypes - Array of allowed file extensions\r\n * @returns {Object} - Validation result\r\n */\r\nexport const validateFileType = (file, allowedTypes) => {\r\n  if (!file || !file.name) {\r\n    return {\r\n      isValid: false,\r\n      error: 'Invalid file object'\r\n    };\r\n  }\r\n\r\n  const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\r\n  \r\n  if (!allowedTypes.includes(fileExtension)) {\r\n    return {\r\n      isValid: false,\r\n      error: `File type not allowed. Allowed types: ${allowedTypes.join(', ')}`\r\n    };\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    fileExtension\r\n  };\r\n};\r\n\r\n/**\r\n * Validate file size\r\n * @param {File} file - File to validate\r\n * @param {number} maxSize - Maximum file size in bytes\r\n * @param {number} minSize - Minimum file size in bytes (optional)\r\n * @returns {Object} - Validation result\r\n */\r\nexport const validateFileSize = (file, maxSize, minSize = 0) => {\r\n  if (!file) {\r\n    return {\r\n      isValid: false,\r\n      error: 'Invalid file object'\r\n    };\r\n  }\r\n\r\n  if (file.size > maxSize) {\r\n    const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(1);\r\n    return {\r\n      isValid: false,\r\n      error: `File too large. Maximum size: ${maxSizeMB}MB`\r\n    };\r\n  }\r\n\r\n  if (minSize > 0 && file.size < minSize) {\r\n    const minSizeKB = (minSize / 1024).toFixed(1);\r\n    return {\r\n      isValid: false,\r\n      error: `File too small. Minimum size: ${minSizeKB}KB`\r\n    };\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    fileSize: file.size\r\n  };\r\n};\r\n\r\n/**\r\n * Validate session file\r\n * @param {File} file - File to validate\r\n * @returns {Object} - Validation result\r\n */\r\nexport const validateSessionFile = (file) => {\r\n  // Validate file type\r\n  const typeValidation = validateFileType(file, FILE_TYPES.ALL_SESSION_FILES);\r\n  if (!typeValidation.isValid) {\r\n    return typeValidation;\r\n  }\r\n\r\n  // Validate file size\r\n  const sizeValidation = validateFileSize(file, FILE_SIZES.MAX_SESSION_FILE);\r\n  if (!sizeValidation.isValid) {\r\n    return sizeValidation;\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    fileType: typeValidation.fileExtension,\r\n    fileSize: sizeValidation.fileSize\r\n  };\r\n};\r\n\r\n/**\r\n * Validate image file\r\n * @param {File} file - File to validate\r\n * @returns {Object} - Validation result\r\n */\r\nexport const validateImageFile = (file) => {\r\n  // Validate file type\r\n  const typeValidation = validateFileType(file, FILE_TYPES.ALL_IMAGES);\r\n  if (!typeValidation.isValid) {\r\n    return typeValidation;\r\n  }\r\n\r\n  // Validate file size\r\n  const sizeValidation = validateFileSize(\r\n    file, \r\n    FILE_SIZES.MAX_IMAGE_FILE, \r\n    FILE_SIZES.MIN_IMAGE_FILE\r\n  );\r\n  if (!sizeValidation.isValid) {\r\n    return sizeValidation;\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    fileType: typeValidation.fileExtension,\r\n    fileSize: sizeValidation.fileSize\r\n  };\r\n};\r\n\r\n/**\r\n * Validate multiple files\r\n * @param {Array} files - Array of files to validate\r\n * @param {Function} validator - Validation function to use\r\n * @returns {Object} - Validation result\r\n */\r\nexport const validateMultipleFiles = (files, validator) => {\r\n  if (!Array.isArray(files) || files.length === 0) {\r\n    return {\r\n      isValid: false,\r\n      error: 'No files provided'\r\n    };\r\n  }\r\n\r\n  const results = [];\r\n  const errors = [];\r\n\r\n  for (let i = 0; i < files.length; i++) {\r\n    const file = files[i];\r\n    const validation = validator(file);\r\n    \r\n    if (validation.isValid) {\r\n      results.push({\r\n        file,\r\n        index: i,\r\n        ...validation\r\n      });\r\n    } else {\r\n      errors.push({\r\n        file,\r\n        index: i,\r\n        error: validation.error\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    validFiles: results,\r\n    invalidFiles: errors,\r\n    totalFiles: files.length,\r\n    validCount: results.length,\r\n    invalidCount: errors.length\r\n  };\r\n};\r\n\r\n/**\r\n * Validate file upload for specific use case\r\n * @param {Array} files - Files to validate\r\n * @param {string} useCase - Use case for validation\r\n * @returns {Object} - Validation result\r\n */\r\nexport const validateFileUpload = (files, useCase) => {\r\n  const validators = {\r\n    'session': validateSessionFile,\r\n    'image': validateImageFile,\r\n    'zip': (file) => validateFileType(file, [FILE_TYPES.ZIP]) && validateFileSize(file, FILE_SIZES.MAX_ZIP_FILE),\r\n    'mixed': (file) => {\r\n      if (file.name.endsWith(FILE_TYPES.SESSION)) {\r\n        return validateSessionFile(file);\r\n      } else if (file.name.endsWith(FILE_TYPES.ZIP)) {\r\n        return validateFileType(file, [FILE_TYPES.ZIP]) && validateFileSize(file, FILE_SIZES.MAX_ZIP_FILE);\r\n      }\r\n      return { isValid: false, error: 'Invalid file type' };\r\n    }\r\n  };\r\n\r\n  const validator = validators[useCase];\r\n  if (!validator) {\r\n    return {\r\n      isValid: false,\r\n      error: `Unknown use case: ${useCase}`\r\n    };\r\n  }\r\n\r\n  return validateMultipleFiles(files, validator);\r\n};\r\n\r\n/**\r\n * Format file size for display\r\n * @param {number} bytes - File size in bytes\r\n * @returns {string} - Formatted file size\r\n */\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  \r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\n/**\r\n * Get file icon based on file type\r\n * @param {string} fileName - File name\r\n * @returns {string} - Icon name for the file type\r\n */\r\nexport const getFileIcon = (fileName) => {\r\n  if (!fileName) return 'file';\r\n  \r\n  const extension = fileName.toLowerCase().substring(fileName.lastIndexOf('.'));\r\n  \r\n  if (extension === FILE_TYPES.SESSION) return 'session';\r\n  if (extension === FILE_TYPES.ZIP) return 'archive';\r\n  if (FILE_TYPES.IMAGE.includes(extension)) return 'image';\r\n  \r\n  return 'file';\r\n};\r\n\r\n/**\r\n * Check if file is an image\r\n * @param {File} file - File to check\r\n * @returns {boolean} - True if file is an image\r\n */\r\nexport const isImageFile = (file) => {\r\n  if (!file || !file.name) return false;\r\n  \r\n  const extension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\r\n  return FILE_TYPES.IMAGE.includes(extension);\r\n};\r\n\r\n/**\r\n * Check if file is a session file\r\n * @param {File} file - File to check\r\n * @returns {boolean} - True if file is a session file\r\n */\r\nexport const isSessionFile = (file) => {\r\n  if (!file || !file.name) return false;\r\n  \r\n  const extension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\r\n  return extension === FILE_TYPES.SESSION;\r\n};\r\n\r\n/**\r\n * Check if file is a ZIP file\r\n * @param {File} file - File to check\r\n * @returns {boolean} - True if file is a ZIP file\r\n */\r\nexport const isZipFile = (file) => {\r\n  if (!file || !file.name) return false;\r\n  \r\n  const extension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\r\n  return extension === FILE_TYPES.ZIP;\r\n};\r\n\r\nexport default {\r\n  FILE_TYPES,\r\n  FILE_SIZES,\r\n  validateFileType,\r\n  validateFileSize,\r\n  validateSessionFile,\r\n  validateImageFile,\r\n  validateMultipleFiles,\r\n  validateFileUpload,\r\n  formatFileSize,\r\n  getFileIcon,\r\n  isImageFile,\r\n  isSessionFile,\r\n  isZipFile\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}