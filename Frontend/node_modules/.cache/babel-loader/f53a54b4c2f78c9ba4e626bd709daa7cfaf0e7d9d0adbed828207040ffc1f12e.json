{"ast":null,"code":"import { toast } from 'react-hot-toast';\n\n/**\r\n * Centralized error handler for consistent error display across the application\r\n */\n\n/**\r\n * Handle API errors and display appropriate messages\r\n * @param {Error} error - The error object\r\n * @param {string} fallbackMessage - Fallback message if error details are not available\r\n * @param {Object} options - Additional options for error handling\r\n * @returns {Object} - Error details for component state\r\n */\nexport const handleError = (error, fallbackMessage = 'An error occurred', options = {}) => {\n  const {\n    showToast = true,\n    logError = true,\n    returnDetails = false\n  } = options;\n\n  // Extract error message\n  let message = fallbackMessage;\n  let errorType = 'general_error';\n  let technicalError = '';\n  if (error) {\n    var _error$response, _error$response$data, _error$response2, _error$response2$data;\n    // Handle different error formats\n    if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.detail) {\n      message = error.response.data.detail;\n      errorType = error.response.data.error_type || 'api_error';\n      technicalError = error.response.data.technical_error || '';\n    } else if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.message) {\n      message = error.response.data.message;\n      errorType = 'api_error';\n    } else if (error.message) {\n      message = error.message;\n      errorType = 'client_error';\n    } else if (typeof error === 'string') {\n      message = error;\n      errorType = 'string_error';\n    }\n\n    // Log error if enabled\n    if (logError) {\n      console.error('Error details:', {\n        message,\n        errorType,\n        technicalError,\n        originalError: error\n      });\n    }\n  }\n\n  // Show toast notification if enabled\n  if (showToast) {\n    toast.error(message, {\n      duration: 5000,\n      position: 'top-right',\n      style: {\n        background: '#FEE2E2',\n        color: '#DC2626',\n        border: '1px solid #FCA5A5'\n      }\n    });\n  }\n\n  // Return error details if requested\n  if (returnDetails) {\n    return {\n      message,\n      errorType,\n      technicalError,\n      hasError: true\n    };\n  }\n  return {\n    hasError: true\n  };\n};\n\n/**\r\n * Handle specific error types with custom messages\r\n * @param {string} errorType - The type of error\r\n * @param {string} context - Context where the error occurred\r\n * @returns {string} - Human-readable error message\r\n */\nexport const getErrorMessage = (errorType, context = '') => {\n  const errorMessages = {\n    // Authentication errors\n    'authentication': 'Authentication failed. Please log in again.',\n    'session_expired': 'Your session has expired. Please log in again.',\n    'unauthorized': 'You are not authorized to perform this action.',\n    // Rate limiting\n    'rate_limit': 'Too many requests. Please wait before trying again.',\n    'flood_wait': 'Action blocked due to rate limiting. Please wait before trying again.',\n    // Account status\n    'account_banned': 'This account has been banned by Telegram.',\n    'account_deleted': 'This account has been deleted.',\n    'account_frozen': 'This account is frozen. Please contact Telegram support.',\n    // File upload errors\n    'file_upload': 'File upload failed. Please check your file and try again.',\n    'file_too_large': 'File is too large. Please use a smaller file.',\n    'invalid_file_type': 'Invalid file type. Please use a supported format.',\n    // Network errors\n    'network': 'Network connection failed. Please check your internet connection.',\n    'timeout': 'Request timed out. Please try again.',\n    'connection_failed': 'Connection failed. Please try again.',\n    // Validation errors\n    'validation': 'Invalid input. Please check your data and try again.',\n    'required_field': 'Required field is missing. Please fill in all required fields.',\n    // Permission errors\n    'permission': 'You don\\'t have permission to perform this action.',\n    'admin_required': 'Admin privileges are required for this action.',\n    // General errors\n    'general_error': 'An unexpected error occurred. Please try again.',\n    'unknown_error': 'An unknown error occurred. Please try again.',\n    'server_error': 'Server error occurred. Please try again later.',\n    'api_error': 'API request failed. Please try again.'\n  };\n  const baseMessage = errorMessages[errorType] || errorMessages.general_error;\n  if (context) {\n    return `${baseMessage} Context: ${context}`;\n  }\n  return baseMessage;\n};\n\n/**\r\n * Handle form validation errors\r\n * @param {Object} errors - Validation errors object\r\n * @param {string} context - Form context\r\n * @returns {Object} - Formatted validation errors\r\n */\nexport const handleValidationErrors = (errors, context = 'form') => {\n  const formattedErrors = {};\n  Object.keys(errors).forEach(field => {\n    const error = errors[field];\n    let message = '';\n    if (typeof error === 'string') {\n      message = error;\n    } else if (error !== null && error !== void 0 && error.message) {\n      message = error.message;\n    } else if (error !== null && error !== void 0 && error.type) {\n      message = getErrorMessage(error.type, `${context}.${field}`);\n    } else {\n      message = getErrorMessage('validation', `${context}.${field}`);\n    }\n    formattedErrors[field] = message;\n\n    // Show toast for validation errors\n    toast.error(`${field}: ${message}`, {\n      duration: 4000,\n      position: 'top-right'\n    });\n  });\n  return formattedErrors;\n};\n\n/**\r\n * Handle network errors specifically\r\n * @param {Error} error - Network error\r\n * @returns {Object} - Network error details\r\n */\nexport const handleNetworkError = error => {\n  let message = 'Network connection failed';\n  let errorType = 'network';\n  if (error.code === 'NETWORK_ERROR') {\n    message = 'No internet connection. Please check your network.';\n  } else if (error.code === 'TIMEOUT') {\n    message = 'Request timed out. Please try again.';\n    errorType = 'timeout';\n  } else if (error.code === 'ABORTED') {\n    message = 'Request was cancelled.';\n    errorType = 'cancelled';\n  }\n  toast.error(message, {\n    duration: 6000,\n    position: 'top-right',\n    style: {\n      background: '#FEF3C7',\n      color: '#D97706',\n      border: '1px solid #FCD34D'\n    }\n  });\n  return {\n    message,\n    errorType,\n    hasError: true\n  };\n};\n\n/**\r\n * Handle cancellation errors (when user cancels an operation)\r\n * @param {string} operation - The operation that was cancelled\r\n * @returns {Object} - Cancellation details\r\n */\nexport const handleCancellation = (operation = 'operation') => {\n  const message = `${operation} was cancelled`;\n  toast.info(message, {\n    duration: 3000,\n    position: 'top-right',\n    style: {\n      background: '#DBEAFE',\n      color: '#2563EB',\n      border: '1px solid #93C5FD'\n    }\n  });\n  return {\n    message,\n    errorType: 'cancelled',\n    hasError: false\n  };\n};\n\n/**\r\n * Create a custom error handler for specific components\r\n * @param {string} componentName - Name of the component\r\n * @param {Object} options - Error handling options\r\n * @returns {Function} - Custom error handler function\r\n */\nexport const createComponentErrorHandler = (componentName, options = {}) => {\n  return (error, context = '') => {\n    const enhancedContext = context ? `${componentName}: ${context}` : componentName;\n    return handleError(error, `Error in ${componentName}`, {\n      ...options,\n      logError: true,\n      returnDetails: true\n    });\n  };\n};\nexport default {\n  handleError,\n  getErrorMessage,\n  handleValidationErrors,\n  handleNetworkError,\n  handleCancellation,\n  createComponentErrorHandler\n};","map":{"version":3,"names":["toast","handleError","error","fallbackMessage","options","showToast","logError","returnDetails","message","errorType","technicalError","_error$response","_error$response$data","_error$response2","_error$response2$data","response","data","detail","error_type","technical_error","console","originalError","duration","position","style","background","color","border","hasError","getErrorMessage","context","errorMessages","baseMessage","general_error","handleValidationErrors","errors","formattedErrors","Object","keys","forEach","field","type","handleNetworkError","code","handleCancellation","operation","info","createComponentErrorHandler","componentName","enhancedContext"],"sources":["F:/Local disk c/Session Web 2.0/Frontend/src/utils/errorHandler.js"],"sourcesContent":["import { toast } from 'react-hot-toast';\r\n\r\n/**\r\n * Centralized error handler for consistent error display across the application\r\n */\r\n\r\n/**\r\n * Handle API errors and display appropriate messages\r\n * @param {Error} error - The error object\r\n * @param {string} fallbackMessage - Fallback message if error details are not available\r\n * @param {Object} options - Additional options for error handling\r\n * @returns {Object} - Error details for component state\r\n */\r\nexport const handleError = (error, fallbackMessage = 'An error occurred', options = {}) => {\r\n  const {\r\n    showToast = true,\r\n    logError = true,\r\n    returnDetails = false\r\n  } = options;\r\n\r\n  // Extract error message\r\n  let message = fallbackMessage;\r\n  let errorType = 'general_error';\r\n  let technicalError = '';\r\n\r\n  if (error) {\r\n    // Handle different error formats\r\n    if (error.response?.data?.detail) {\r\n      message = error.response.data.detail;\r\n      errorType = error.response.data.error_type || 'api_error';\r\n      technicalError = error.response.data.technical_error || '';\r\n    } else if (error.response?.data?.message) {\r\n      message = error.response.data.message;\r\n      errorType = 'api_error';\r\n    } else if (error.message) {\r\n      message = error.message;\r\n      errorType = 'client_error';\r\n    } else if (typeof error === 'string') {\r\n      message = error;\r\n      errorType = 'string_error';\r\n    }\r\n\r\n    // Log error if enabled\r\n    if (logError) {\r\n      console.error('Error details:', {\r\n        message,\r\n        errorType,\r\n        technicalError,\r\n        originalError: error\r\n      });\r\n    }\r\n  }\r\n\r\n  // Show toast notification if enabled\r\n  if (showToast) {\r\n    toast.error(message, {\r\n      duration: 5000,\r\n      position: 'top-right',\r\n      style: {\r\n        background: '#FEE2E2',\r\n        color: '#DC2626',\r\n        border: '1px solid #FCA5A5'\r\n      }\r\n    });\r\n  }\r\n\r\n  // Return error details if requested\r\n  if (returnDetails) {\r\n    return {\r\n      message,\r\n      errorType,\r\n      technicalError,\r\n      hasError: true\r\n    };\r\n  }\r\n\r\n  return { hasError: true };\r\n};\r\n\r\n/**\r\n * Handle specific error types with custom messages\r\n * @param {string} errorType - The type of error\r\n * @param {string} context - Context where the error occurred\r\n * @returns {string} - Human-readable error message\r\n */\r\nexport const getErrorMessage = (errorType, context = '') => {\r\n  const errorMessages = {\r\n    // Authentication errors\r\n    'authentication': 'Authentication failed. Please log in again.',\r\n    'session_expired': 'Your session has expired. Please log in again.',\r\n    'unauthorized': 'You are not authorized to perform this action.',\r\n    \r\n    // Rate limiting\r\n    'rate_limit': 'Too many requests. Please wait before trying again.',\r\n    'flood_wait': 'Action blocked due to rate limiting. Please wait before trying again.',\r\n    \r\n    // Account status\r\n    'account_banned': 'This account has been banned by Telegram.',\r\n    'account_deleted': 'This account has been deleted.',\r\n    'account_frozen': 'This account is frozen. Please contact Telegram support.',\r\n    \r\n    // File upload errors\r\n    'file_upload': 'File upload failed. Please check your file and try again.',\r\n    'file_too_large': 'File is too large. Please use a smaller file.',\r\n    'invalid_file_type': 'Invalid file type. Please use a supported format.',\r\n    \r\n    // Network errors\r\n    'network': 'Network connection failed. Please check your internet connection.',\r\n    'timeout': 'Request timed out. Please try again.',\r\n    'connection_failed': 'Connection failed. Please try again.',\r\n    \r\n    // Validation errors\r\n    'validation': 'Invalid input. Please check your data and try again.',\r\n    'required_field': 'Required field is missing. Please fill in all required fields.',\r\n    \r\n    // Permission errors\r\n    'permission': 'You don\\'t have permission to perform this action.',\r\n    'admin_required': 'Admin privileges are required for this action.',\r\n    \r\n    // General errors\r\n    'general_error': 'An unexpected error occurred. Please try again.',\r\n    'unknown_error': 'An unknown error occurred. Please try again.',\r\n    'server_error': 'Server error occurred. Please try again later.',\r\n    'api_error': 'API request failed. Please try again.'\r\n  };\r\n\r\n  const baseMessage = errorMessages[errorType] || errorMessages.general_error;\r\n  \r\n  if (context) {\r\n    return `${baseMessage} Context: ${context}`;\r\n  }\r\n  \r\n  return baseMessage;\r\n};\r\n\r\n/**\r\n * Handle form validation errors\r\n * @param {Object} errors - Validation errors object\r\n * @param {string} context - Form context\r\n * @returns {Object} - Formatted validation errors\r\n */\r\nexport const handleValidationErrors = (errors, context = 'form') => {\r\n  const formattedErrors = {};\r\n  \r\n  Object.keys(errors).forEach(field => {\r\n    const error = errors[field];\r\n    let message = '';\r\n    \r\n    if (typeof error === 'string') {\r\n      message = error;\r\n    } else if (error?.message) {\r\n      message = error.message;\r\n    } else if (error?.type) {\r\n      message = getErrorMessage(error.type, `${context}.${field}`);\r\n    } else {\r\n      message = getErrorMessage('validation', `${context}.${field}`);\r\n    }\r\n    \r\n    formattedErrors[field] = message;\r\n    \r\n    // Show toast for validation errors\r\n    toast.error(`${field}: ${message}`, {\r\n      duration: 4000,\r\n      position: 'top-right'\r\n    });\r\n  });\r\n  \r\n  return formattedErrors;\r\n};\r\n\r\n/**\r\n * Handle network errors specifically\r\n * @param {Error} error - Network error\r\n * @returns {Object} - Network error details\r\n */\r\nexport const handleNetworkError = (error) => {\r\n  let message = 'Network connection failed';\r\n  let errorType = 'network';\r\n  \r\n  if (error.code === 'NETWORK_ERROR') {\r\n    message = 'No internet connection. Please check your network.';\r\n  } else if (error.code === 'TIMEOUT') {\r\n    message = 'Request timed out. Please try again.';\r\n    errorType = 'timeout';\r\n  } else if (error.code === 'ABORTED') {\r\n    message = 'Request was cancelled.';\r\n    errorType = 'cancelled';\r\n  }\r\n  \r\n  toast.error(message, {\r\n    duration: 6000,\r\n    position: 'top-right',\r\n    style: {\r\n      background: '#FEF3C7',\r\n      color: '#D97706',\r\n      border: '1px solid #FCD34D'\r\n    }\r\n  });\r\n  \r\n  return {\r\n    message,\r\n    errorType,\r\n    hasError: true\r\n  };\r\n};\r\n\r\n/**\r\n * Handle cancellation errors (when user cancels an operation)\r\n * @param {string} operation - The operation that was cancelled\r\n * @returns {Object} - Cancellation details\r\n */\r\nexport const handleCancellation = (operation = 'operation') => {\r\n  const message = `${operation} was cancelled`;\r\n  \r\n  toast.info(message, {\r\n    duration: 3000,\r\n    position: 'top-right',\r\n    style: {\r\n      background: '#DBEAFE',\r\n      color: '#2563EB',\r\n      border: '1px solid #93C5FD'\r\n    }\r\n  });\r\n  \r\n  return {\r\n    message,\r\n    errorType: 'cancelled',\r\n    hasError: false\r\n  };\r\n};\r\n\r\n/**\r\n * Create a custom error handler for specific components\r\n * @param {string} componentName - Name of the component\r\n * @param {Object} options - Error handling options\r\n * @returns {Function} - Custom error handler function\r\n */\r\nexport const createComponentErrorHandler = (componentName, options = {}) => {\r\n  return (error, context = '') => {\r\n    const enhancedContext = context ? `${componentName}: ${context}` : componentName;\r\n    return handleError(error, `Error in ${componentName}`, {\r\n      ...options,\r\n      logError: true,\r\n      returnDetails: true\r\n    });\r\n  };\r\n};\r\n\r\nexport default {\r\n  handleError,\r\n  getErrorMessage,\r\n  handleValidationErrors,\r\n  handleNetworkError,\r\n  handleCancellation,\r\n  createComponentErrorHandler\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}